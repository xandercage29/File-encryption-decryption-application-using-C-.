#include <iostream>
#include <fstream>
#include <vector>
#include <thread>
#include <mutex>
#include <queue>
#include <condition_variable>
#include <string>
#include <cstring>
#include <openssl/aes.h>
#include <openssl/evp.h>
#include <openssl/rand.h>

// Constants
const size_t CHUNK_SIZE = 1024 * 1024; // 1MB chunks
const size_t BUFFER_SIZE = 1024;
const int KEY_SIZE = 32; // 256 bits
const int IV_SIZE = 16;  // 128 bits

// Thread-safe queue for chunks
template<typename T>
class ThreadSafeQueue {
private:
    std::queue<T> queue;
    std::mutex mutex;
    std::condition_variable not_empty;
    bool finished = false;

public:
    void push(T item) {
        std::unique_lock<std::mutex> lock(mutex);
        queue.push(std::move(item));
        lock.unlock();
        not_empty.notify_one();
    }

    bool pop(T& item) {
        std::unique_lock<std::mutex> lock(mutex);
        while (queue.empty() && !finished) {
            not_empty.wait(lock);
        }
        if (queue.empty() && finished) {
            return false;
        }
        item = std::move(queue.front());
        queue.pop();
        return true;
    }

    void setFinished() {
        std::unique_lock<std::mutex> lock(mutex);
        finished = true;
        lock.unlock();
        not_empty.notify_all();
    }
};

// Struct to hold chunk data
struct Chunk {
    std::vector<unsigned char> data;
    size_t original_size;
    size_t chunk_number;
};

class FileEncryptor {
private:
    unsigned char key[KEY_SIZE];
    unsigned char iv[IV_SIZE];
    size_t num_threads;
    ThreadSafeQueue<Chunk> input_queue;
    ThreadSafeQueue<Chunk> output_queue;
    std::vector<std::thread> worker_threads;
    std::mutex file_mutex;

    // Initialize OpenSSL
    void initializeOpenSSL() {
        OpenSSL_add_all_algorithms();
    }

    // Generate random key and IV
    void generateKeyAndIV() {
        if (RAND_bytes(key, KEY_SIZE) != 1) {
            throw std::runtime_error("Failed to generate key");
        }
        if (RAND_bytes(iv, IV_SIZE) != 1) {
            throw std::runtime_error("Failed to generate IV");
        }
    }

    // Worker function for encryption
    void encryptWorker() {
        EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
        EVP_EncryptInit_ex(ctx, EVP_aes_256_cbc(), nullptr, key, iv);

        Chunk chunk;
        while (input_queue.pop(chunk)) {
            std::vector<unsigned char> encrypted_data(chunk.data.size() + EVP_MAX_BLOCK_LENGTH);
            int encrypted_length;

            EVP_EncryptUpdate(ctx, encrypted_data.data(), &encrypted_length,
                            chunk.data.data(), chunk.data.size());

            int final_length;
            EVP_EncryptFinal_ex(ctx, encrypted_data.data() + encrypted_length, &final_length);

            encrypted_data.resize(encrypted_length + final_length);
            chunk.data = std::move(encrypted_data);
            output_queue.push(std::move(chunk));
        }

        EVP_CIPHER_CTX_free(ctx);
    }

    // Worker function for decryption
    void decryptWorker() {
        EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
        EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), nullptr, key, iv);

        Chunk chunk;
        while (input_queue.pop(chunk)) {
            std::vector<unsigned char> decrypted_data(chunk.data.size());
            int decrypted_length;

            EVP_DecryptUpdate(ctx, decrypted_data.data(), &decrypted_length,
                            chunk.data.data(), chunk.data.size());

            int final_length;
            EVP_DecryptFinal_ex(ctx, decrypted_data.data() + decrypted_length, &final_length);

            decrypted_data.resize(decrypted_length + final_length);
            chunk.data = std::move(decrypted_data);
            output_queue.push(std::move(chunk));
        }

        EVP_CIPHER_CTX_free(ctx);
    }

public:
    FileEncryptor(size_t threads = std::thread::hardware_concurrency())
        : num_threads(threads) {
        initializeOpenSSL();
        generateKeyAndIV();
    }

    void saveKeyAndIV(const std::string& filename) {
        std::ofstream keyfile(filename, std::ios::binary);
        keyfile.write(reinterpret_cast<char*>(key), KEY_SIZE);
        keyfile.write(reinterpret_cast<char*>(iv), IV_SIZE);
    }

    void loadKeyAndIV(const std::string& filename) {
        std::ifstream keyfile(filename, std::ios::binary);
        keyfile.read(reinterpret_cast<char*>(key), KEY_SIZE);
        keyfile.read(reinterpret_cast<char*>(iv), IV_SIZE);
    }

    void encryptFile(const std::string& input_filename, const std::string& output_filename) {
        // Start worker threads
        for (size_t i = 0; i < num_threads; ++i) {
            worker_threads.emplace_back(&FileEncryptor::encryptWorker, this);
        }

        // Read input file in chunks
        std::ifstream input_file(input_filename, std::ios::binary);
        size_t chunk_number = 0;

        while (input_file) {
            Chunk chunk;
            chunk.data.resize(CHUNK_SIZE);
            input_file.read(reinterpret_cast<char*>(chunk.data.data()), CHUNK_SIZE);
            chunk.original_size = input_file.gcount();
            chunk.chunk_number = chunk_number++;
            
            if (chunk.original_size > 0) {
                chunk.data.resize(chunk.original_size);
                input_queue.push(std::move(chunk));
            }
        }

        input_queue.setFinished();

        // Write encrypted chunks to output file
        std::ofstream output_file(output_filename, std::ios::binary);
        std::vector<Chunk> sorted_chunks;
        sorted_chunks.resize(chunk_number);

        size_t chunks_processed = 0;
        while (chunks_processed < chunk_number) {
            Chunk chunk;
            if (output_queue.pop(chunk)) {
                sorted_chunks[chunk.chunk_number] = std::move(chunk);
                chunks_processed++;
            }
        }

        for (const auto& chunk : sorted_chunks) {
            output_file.write(reinterpret_cast<const char*>(chunk.data.data()), chunk.data.size());
        }

        // Join worker threads
        for (auto& thread : worker_threads) {
            thread.join();
        }
        worker_threads.clear();
    }

    void decryptFile(const std::string& input_filename, const std::string& output_filename) {
        // Similar to encryptFile but using decryptWorker
        worker_threads.clear();
        for (size_t i = 0; i < num_threads; ++i) {
            worker_threads.emplace_back(&FileEncryptor::decryptWorker, this);
        }

        std::ifstream input_file(input_filename, std::ios::binary);
        size_t chunk_number = 0;

        while (input_file) {
            Chunk chunk;
            chunk.data.resize(CHUNK_SIZE);
            input_file.read(reinterpret_cast<char*>(chunk.data.data()), CHUNK_SIZE);
            chunk.original_size = input_file.gcount();
            chunk.chunk_number = chunk_number++;
            
            if (chunk.original_size > 0) {
                chunk.data.resize(chunk.original_size);
                input_queue.push(std::move(chunk));
            }
        }

        input_queue.setFinished();

        std::ofstream output_file(output_filename, std::ios::binary);
        std::vector<Chunk> sorted_chunks;
        sorted_chunks.resize(chunk_number);

        size_t chunks_processed = 0;
        while (chunks_processed < chunk_number) {
            Chunk chunk;
            if (output_queue.pop(chunk)) {
                sorted_chunks[chunk.chunk_number] = std::move(chunk);
                chunks_processed++;
            }
        }

        for (const auto& chunk : sorted_chunks) {
            output_file.write(reinterpret_cast<const char*>(chunk.data.data()), chunk.data.size());
        }

        for (auto& thread : worker_threads) {
            thread.join();
        }
    }

    ~FileEncryptor() {
        EVP_cleanup();
    }
};

int main() {
    try {
        FileEncryptor encryptor;
        std::string input_file, output_file, operation;

        std::cout << "Enter operation (encrypt/decrypt): ";
        std::cin >> operation;
        
        std::cout << "Enter input file path: ";
        std::cin >> input_file;
        
        std::cout << "Enter output file path: ";
        std::cin >> output_file;

        if (operation == "encrypt") {
            std::cout << "Starting encryption...\n";
            encryptor.saveKeyAndIV("key.bin");
            encryptor.encryptFile(input_file, output_file);
            std::cout << "Encryption complete. Key and IV saved to key.bin\n";
        } else if (operation == "decrypt") {
            std::cout << "Loading key and IV...\n";
            encryptor.loadKeyAndIV("key.bin");
            std::cout << "Starting decryption...\n";
            encryptor.decryptFile(input_file, output_file);
            std::cout << "Decryption complete.\n";
        } else {
            std::cout << "Invalid operation\n";
            return 1;
        }
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        return 1;
    }

    return 0;
}
